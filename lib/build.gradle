plugins {
    id 'scala'
    id 'maven-publish'
    id 'signing'
}

final def scalaVersion = getScalaVersion()
final def scalaLibraryVersion = getScalaLibraryVersion()

final def sparkVersion = '3.2.1'

dependencies {
    implementation "org.apache.spark:spark-core_$scalaVersion:$sparkVersion"
    implementation "org.apache.spark:spark-sql_$scalaVersion:$sparkVersion"

    compileOnly "org.scala-lang:scala-library:$scalaLibraryVersion"

    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation(group: 'junit', name: 'junit', version: '4.13.2') {
        exclude group: 'org.hamcrest'
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.release = 8
}

scaladoc {
    title = 'Trace Analysis'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allScala
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    def scaladoc = tasks.scaladoc
    from scaladoc.destinationDir
    dependsOn scaladoc
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.joom.tracing'
            artifactId = "trace-analysis_$scalaVersion"
            version = '0.1.1'

            from components.java

            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            pom {
                name = 'trace-analysis'
                description = 'A library for performance bottleneck detection and optimization efficiency prediction.'
                inceptionYear = '2022'
                url = 'https://github.com/joomcode/trace-analysis'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }
                organization {
                    name = 'Joom'
                    url = 'https://joom.com'
                }
                developers {
                    developer {
                        id = 'Sovianum'
                        name = 'Artem Kliukvin'
                        email = 'sovianum@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/joomcode/trace-analysis.git'
                    developerConnection = 'scm:git:ssh://git@github.com/joomcode/trace-analysis.git'
                    url = 'https://github.com/joomcode/trace-analysis'
                }
            }
        }
    }

    repositories {
        def mavenUrl = findProperty('publication.repository.maven.url')
        if (mavenUrl != null) {
            maven {
                url mavenUrl

                def mavenName = findProperty('publication.repository.maven.name')
                def mavenUsername = findProperty('publication.repository.maven.username')
                def mavenPassword = findProperty('publication.repository.maven.password')

                if (mavenName != null) {
                    name mavenName
                }

                credentials {
                    username mavenUsername
                    password mavenPassword
                }
            }
        }
    }
}

signing {
    def isSigningEnabled = findProperty('publication.signing.enabled')?.toBoolean() ?: true
    if (isSigningEnabled) {
        def keyId = findProperty('publication.signing.keyId')
        def secretKey = findProperty('publication.signing.secretKey')
        def password = findProperty('publication.signing.password')
        if (secretKey != null && password != null) {
            useInMemoryPgpKeys(keyId, secretKey, password)
            sign publishing.publications.maven
        }
    }
}

getProperty('java.test.versions')
    .split(',')
    .collect { JavaLanguageVersion.of(it).asInt() }
    .unique()
    .each { majorVersion ->
        def jdkTest = tasks.register("testJdk$majorVersion", Test) {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(majorVersion)
            }

            description = "Runs the test suite on JDK $majorVersion"
            group = LifecycleBasePlugin.VERIFICATION_GROUP

            // Copy inputs from normal Test task.
            def testTask = tasks.getByName("test")
            classpath = testTask.classpath
            testClassesDirs = testTask.testClassesDirs
        }
        tasks.named("check").configure { dependsOn(jdkTest) }
    }

String getScalaLibraryVersion() {
    def scalaVersion = getProperty('scala.version').toString()
    def parts = scalaVersion.split('\\.')
    if (parts.length >= 3) {
        return scalaVersion
    } else {
        return (parts + '+').join('.')
    }
}

String getScalaVersion() {
    def scalaVersion = getProperty('scala.version').toString()
    def parts = scalaVersion.split('\\.')
    switch (parts[0]) {
        case '2':
            return "${parts[0]}.${parts[1]}"
        default:
            throw new IllegalArgumentException("Unsupported scala version $scalaVersion")
    }
}
